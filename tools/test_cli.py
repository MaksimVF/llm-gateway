#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CLI-—É—Ç–∏–ª–∏—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API-–∫–ª—é—á–∞–º–∏
"""

import os
import json
import tempfile
from pathlib import Path
from key_utils import (
    generate_api_key, validate_key_format, add_key, remove_key,
    update_key_limit, get_key_info, list_all_keys, get_keys_stats,
    backup_keys, restore_keys, KEYS_FILE
)


def test_generate_api_key():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API-–∫–ª—é—á–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API-–∫–ª—é—á–∞...")
    
    key = generate_api_key()
    assert key.startswith('sk-'), f"–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-': {key}"
    assert len(key) == 51, f"–î–ª–∏–Ω–∞ –∫–ª—é—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 51 —Å–∏–º–≤–æ–ª: {len(key)}"
    assert validate_key_format(key), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {key}"
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á: {key[:12]}...{key[-4:]}")


def test_validate_key_format():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π...")
    
    # –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
    valid_keys = [
        "sk-" + "a" * 48,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á
        "sk-test-key-1",   # –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
        "sk-prod-key-123", # –ü—Ä–æ–¥–∞–∫—à–Ω –∫–ª—é—á
        "sk-demo-basic"    # –î–µ–º–æ –∫–ª—é—á
    ]
    
    for key in valid_keys:
        assert validate_key_format(key), f"–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º: {key}"
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
    invalid_keys = [
        "invalid-key",     # –ù–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-
        "sk-",             # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        "sk-test",         # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π
        "",                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        None               # None
    ]
    
    for key in invalid_keys:
        assert not validate_key_format(key), f"–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º: {key}"
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_key_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–ª—é—á–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–ª—é—á–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        temp_file = f.name
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–µ–π
    original_keys_file = KEYS_FILE
    import key_utils
    key_utils.KEYS_FILE = Path(temp_file)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
        test_key = "sk-test-cli-key"
        assert add_key(test_key, 50000, "CLI Test", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è CLI")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –¥–æ–±–∞–≤–∏–ª—Å—è
        key_info = get_key_info(test_key)
        assert key_info['max_tokens'] == 50000
        assert key_info['name'] == "CLI Test"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        assert update_key_limit(test_key, 75000)
        updated_info = get_key_info(test_key)
        assert updated_info['max_tokens'] == 75000
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_keys_stats()
        assert stats['total_keys'] == 1
        assert stats['total_tokens'] == 75000
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
        assert remove_key(test_key)
        assert get_key_info(test_key) == {}
        
        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª—é—á–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        key_utils.KEYS_FILE = original_keys_file
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file)


def test_backup_restore():
    """–¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        temp_keys_file = f.name
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        temp_backup_file = f.name
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–µ–π
    original_keys_file = KEYS_FILE
    import key_utils
    key_utils.KEYS_FILE = Path(temp_keys_file)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "sk-test-backup-1": {
                "max_tokens": 10000,
                "name": "Backup Test 1",
                "description": "–¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
            },
            "sk-test-backup-2": {
                "max_tokens": 20000,
                "name": "Backup Test 2",
                "description": "–¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è 2"
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(temp_keys_file, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2, ensure_ascii=False)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        assert backup_keys(temp_backup_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å
        assert os.path.exists(temp_backup_file)
        
        with open(temp_backup_file, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        assert backup_data == test_data
        
        # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        with open(temp_keys_file, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        assert restore_keys(temp_backup_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
        restored_keys = list_all_keys()
        assert len(restored_keys) == 2
        assert "sk-test-backup-1" in restored_keys
        assert "sk-test-backup-2" in restored_keys
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        key_utils.KEYS_FILE = original_keys_file
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.unlink(temp_keys_file)
        os.unlink(temp_backup_file)


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CLI-—É—Ç–∏–ª–∏—Ç—ã...")
    print("=" * 50)
    
    try:
        test_generate_api_key()
        print()
        
        test_validate_key_format()
        print()
        
        test_key_operations()
        print()
        
        test_backup_restore()
        print()
        
        print("=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except AssertionError as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main())