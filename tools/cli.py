#!/usr/bin/env python3
"""
CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API-–∫–ª—é—á–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –≤ LLM Gateway

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python tools/cli.py create-key --limit 100000 [--name "Custom Plan"]
    python tools/cli.py revoke-key --key sk-abc123...
    python tools/cli.py list-keys
    python tools/cli.py set-limit --key sk-abc123... --limit 200000
    python tools/cli.py stats
    python tools/cli.py backup [--path backup.json]
    python tools/cli.py restore --path backup.json
"""

import sys
import argparse
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏
from key_utils import (
    load_keys, save_keys, generate_api_key, validate_key_format,
    add_key, remove_key, update_key_limit, get_key_info, 
    list_all_keys, get_keys_stats, backup_keys, restore_keys
)


def create_key_command(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API-–∫–ª—é—á–∞"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        new_key = generate_api_key()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        success = add_key(
            key=new_key,
            max_tokens=args.limit,
            name=args.name or "CLI Generated",
            description=args.description or f"–ö–ª—é—á —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ CLI —Å –ª–∏–º–∏—Ç–æ–º {args.limit} —Ç–æ–∫–µ–Ω–æ–≤"
        )
        
        if success:
            print(f"‚úÖ API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:")
            print(f"   –ö–ª—é—á: {new_key}")
            print(f"   –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {args.limit:,}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {args.name or 'CLI Generated'}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if args.add_to_env:
                update_env_file(new_key)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API-–∫–ª—é—á–∞")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def revoke_key_command(args):
    """–£–¥–∞–ª–µ–Ω–∏–µ API-–∫–ª—é—á–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        if not validate_key_format(args.key):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {args.key}")
            sys.exit(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        key_info = get_key_info(args.key)
        if not key_info:
            print(f"‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.key}")
            sys.exit(1)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not args.force:
            masked_key = args.key[:12] + "..." + args.key[-4:]
            print(f"‚ö†Ô∏è  –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á {masked_key}?")
            print(f"   –õ–∏–º–∏—Ç: {key_info.get('max_tokens', 0):,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {key_info.get('name', 'N/A')}")
            
            confirm = input("–í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip().lower()
            if confirm != 'yes':
                print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á
        success = remove_key(args.key)
        
        if success:
            masked_key = args.key[:12] + "..." + args.key[-4:]
            print(f"‚úÖ API-–∫–ª—é—á {masked_key} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API-–∫–ª—é—á–∞")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def list_keys_command(args):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö API-–∫–ª—é—á–µ–π"""
    try:
        keys = list_all_keys()
        
        if not keys:
            print("üìù API-–∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìã –°–ø–∏—Å–æ–∫ API-–∫–ª—é—á–µ–π ({len(keys)} —à—Ç.):")
        print("=" * 80)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –ª–∏–º–∏—Ç—É —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_keys = sorted(
            keys.items(), 
            key=lambda x: x[1].get('max_tokens', 0), 
            reverse=True
        )
        
        for key, info in sorted_keys:
            masked_key = key[:12] + "..." + key[-4:] if len(key) > 16 else key
            max_tokens = info.get('max_tokens', 0)
            name = info.get('name', 'N/A')
            description = info.get('description', 'N/A')
            
            print(f"üîë {masked_key}")
            print(f"   üìä –õ–∏–º–∏—Ç: {max_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   üè∑Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
            if args.verbose:
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if args.stats:
            stats = get_keys_stats()
            print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats['total_keys']}")
            print(f"   –û–±—â–∏–π –ª–∏–º–∏—Ç: {stats['total_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç: {stats['avg_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   –ú–∏–Ω. –ª–∏–º–∏—Ç: {stats['min_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   –ú–∞–∫—Å. –ª–∏–º–∏—Ç: {stats['max_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def set_limit_command(args):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–ª—é—á–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        if not validate_key_format(args.key):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {args.key}")
            sys.exit(1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
        key_info = get_key_info(args.key)
        if not key_info:
            print(f"‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.key}")
            sys.exit(1)
        
        old_limit = key_info.get('max_tokens', 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
        success = update_key_limit(args.key, args.limit)
        
        if success:
            masked_key = args.key[:12] + "..." + args.key[-4:]
            print(f"‚úÖ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–ª—é—á–∞ {masked_key}")
            print(f"   –°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç: {old_limit:,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {args.limit:,} —Ç–æ–∫–µ–Ω–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            if old_limit > 0:
                change_percent = ((args.limit - old_limit) / old_limit) * 100
                change_sign = "+" if change_percent > 0 else ""
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_sign}{change_percent:.1f}%")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def stats_command(args):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ API-–∫–ª—é—á–∞–º"""
    try:
        stats = get_keys_stats()
        keys = list_all_keys()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API-–∫–ª—é—á–µ–π:")
        print("=" * 40)
        print(f"üìù –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats['total_keys']}")
        print(f"üéØ –û–±—â–∏–π –ª–∏–º–∏—Ç: {stats['total_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
        
        if stats['total_keys'] > 0:
            print(f"üìä –°—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç: {stats['avg_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {stats['min_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {stats['max_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
            tariff_distribution = {}
            for info in keys.values():
                name = info.get('name', 'Unknown')
                if name not in tariff_distribution:
                    tariff_distribution[name] = 0
                tariff_distribution[name] += 1
            
            if tariff_distribution:
                print("\nüè∑Ô∏è  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º:")
                for name, count in sorted(tariff_distribution.items()):
                    print(f"   {name}: {count} –∫–ª—é—á(–µ–π)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def backup_command(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π"""
    try:
        backup_path = args.path or "keys_backup.json"
        success = backup_keys(backup_path)
        
        if success:
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            stats = get_keys_stats()
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–ª—é—á–µ–π: {stats['total_keys']}")
            print(f"   –û–±—â–∏–π –ª–∏–º–∏—Ç: {stats['total_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def restore_command(args):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        if not Path(args.path).exists():
            print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.path}")
            sys.exit(1)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if not args.force:
            current_stats = get_keys_stats()
            print(f"‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–∏!")
            print(f"   –¢–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–π: {current_stats['total_keys']}")
            print(f"   –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {args.path}")
            
            confirm = input("–í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip().lower()
            if confirm != 'yes':
                print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        success = restore_keys(args.path)
        
        if success:
            print(f"‚úÖ –ö–ª—é—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑: {args.path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            stats = get_keys_stats()
            print(f"   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {stats['total_keys']}")
            print(f"   –û–±—â–∏–π –ª–∏–º–∏—Ç: {stats['total_tokens']:,} —Ç–æ–∫–µ–Ω–æ–≤")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def update_env_file(api_key):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤—ã–º API-–∫–ª—é—á–æ–º"""
    try:
        env_path = Path(__file__).parent.parent / ".env"
        
        if env_path.exists():
            with open(env_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å ALLOWED_API_KEYS
            lines = content.split('\n')
            updated = False
            
            for i, line in enumerate(lines):
                if line.startswith('ALLOWED_API_KEYS='):
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                    current_keys = line.split('=', 1)[1]
                    if current_keys and not current_keys.endswith(','):
                        current_keys += ','
                    lines[i] = f"ALLOWED_API_KEYS={current_keys}{api_key}"
                    updated = True
                    break
            
            if updated:
                with open(env_path, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(lines))
                print(f"‚úÖ –ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ALLOWED_API_KEYS –≤ .env —Ñ–∞–π–ª–µ")
        else:
            print("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API-–∫–ª—é—á–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ LLM Gateway",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python tools/cli.py create-key --limit 100000 --name "Premium Plan"
  python tools/cli.py list-keys --stats --verbose
  python tools/cli.py revoke-key --key sk-abc123... --force
  python tools/cli.py set-limit --key sk-abc123... --limit 200000
  python tools/cli.py stats
  python tools/cli.py backup --path my_backup.json
  python tools/cli.py restore --path my_backup.json --force
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ create-key
    create_parser = subparsers.add_parser('create-key', help='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API-–∫–ª—é—á')
    create_parser.add_argument('--limit', type=int, required=True, 
                              help='–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–ª—é—á–∞')
    create_parser.add_argument('--name', type=str, 
                              help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞')
    create_parser.add_argument('--description', type=str, 
                              help='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞')
    create_parser.add_argument('--add-to-env', action='store_true',
                              help='–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –≤ .env —Ñ–∞–π–ª')
    
    # –ö–æ–º–∞–Ω–¥–∞ revoke-key
    revoke_parser = subparsers.add_parser('revoke-key', help='–£–¥–∞–ª–∏—Ç—å API-–∫–ª—é—á')
    revoke_parser.add_argument('--key', type=str, required=True,
                              help='API-–∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    revoke_parser.add_argument('--force', action='store_true',
                              help='–£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ list-keys
    list_parser = subparsers.add_parser('list-keys', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ API-–∫–ª—é—á–∏')
    list_parser.add_argument('--stats', action='store_true',
                            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    list_parser.add_argument('--verbose', action='store_true',
                            help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    # –ö–æ–º–∞–Ω–¥–∞ set-limit
    limit_parser = subparsers.add_parser('set-limit', help='–û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤')
    limit_parser.add_argument('--key', type=str, required=True,
                             help='API-–∫–ª—é—á')
    limit_parser.add_argument('--limit', type=int, required=True,
                             help='–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ stats
    stats_parser = subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ backup
    backup_parser = subparsers.add_parser('backup', help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
    backup_parser.add_argument('--path', type=str,
                              help='–ü—É—Ç—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ restore
    restore_parser = subparsers.add_parser('restore', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    restore_parser.add_argument('--path', type=str, required=True,
                               help='–ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    restore_parser.add_argument('--force', action='store_true',
                               help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    try:
        if args.command == 'create-key':
            create_key_command(args)
        elif args.command == 'revoke-key':
            revoke_key_command(args)
        elif args.command == 'list-keys':
            list_keys_command(args)
        elif args.command == 'set-limit':
            set_limit_command(args)
        elif args.command == 'stats':
            stats_command(args)
        elif args.command == 'backup':
            backup_command(args)
        elif args.command == 'restore':
            restore_command(args)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            parser.print_help()
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()