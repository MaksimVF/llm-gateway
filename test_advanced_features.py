#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π LLM Gateway:
- Rate limiting
- Token tracking
- Tariff system
"""

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from gateway.limiter import check_rate_limit, get_rate_limit_info, reset_rate_limit, get_redis_health
from billing.token_tracker import token_tracker
from billing.tariffs import get_tariff, set_tariff, get_all_tariffs, apply_tariff_plan


def test_redis_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    
    health = get_redis_health()
    print(f"   –°—Ç–∞—Ç—É—Å: {health['status']}")
    
    if health['status'] == 'connected':
        print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis: {health['host']}:{health['port']}")
        return True
    elif health['status'] == 'not_configured':
        print("   ‚ö†Ô∏è Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –≤ –ø–∞–º—è—Ç–∏")
        return True
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {health.get('error', 'Unknown error')}")
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç—ã —Å fallback


def test_rate_limiting():
    """–¢–µ—Å—Ç rate limiting"""
    print("\nüö¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
    
    test_api_key = "sk-test-rate-limit"
    
    try:
        # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        reset_rate_limit(test_api_key)
        
        # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        for i in range(3):
            rate_info = check_rate_limit(test_api_key)
            print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: {rate_info['current_count']}/{rate_info['limit']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö
        info = get_rate_limit_info(test_api_key)
        print(f"   üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {info['current_count']}/{info['limit']}, –æ—Å—Ç–∞–ª–æ—Å—å: {info['remaining']}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ rate limiting: {e}")
        return False


def test_token_tracker():
    """–¢–µ—Å—Ç TokenTracker"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TokenTracker...")
    
    test_api_key = "sk-test-tracker"
    
    try:
        # –°–±—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        token_tracker.reset_usage(test_api_key)
        
        # –¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
        test_increments = [100, 250, 150, 75]
        for tokens in test_increments:
            success = token_tracker.increment_usage(test_api_key, tokens)
            if success:
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {tokens} —Ç–æ–∫–µ–Ω–æ–≤")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        total_usage = token_tracker.get_usage(test_api_key)
        expected_total = sum(test_increments)
        print(f"   üìà –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {total_usage} —Ç–æ–∫–µ–Ω–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_total})")
        
        if total_usage == expected_total:
            print("   ‚úÖ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥—Å—á—ë—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤")
            return False
        
        # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        detailed = token_tracker.get_detailed_usage(test_api_key)
        print(f"   üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {detailed}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ TokenTracker: {e}")
        return False


def test_tariff_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–∞—Ä–∏—Ñ–æ–≤"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–∞—Ä–∏—Ñ–æ–≤...")
    
    test_api_key = "sk-test-tariff"
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_tariff = get_tariff(test_api_key)
        print(f"   üìã –¢–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_tariff['name']} ({default_tariff['max_tokens']} —Ç–æ–∫–µ–Ω–æ–≤)")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        custom_success = set_tariff(
            api_key=test_api_key,
            max_tokens=5000,
            name="Test Custom",
            description="–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ"
        )
        
        if custom_success:
            print("   ‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞—Ä–∏—Ñ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            custom_tariff = get_tariff(test_api_key)
            print(f"   üìã –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {custom_tariff['name']} ({custom_tariff['max_tokens']} —Ç–æ–∫–µ–Ω–æ–≤)")
            
            if custom_tariff['max_tokens'] == 5000:
                print("   ‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø—Ä–∏–º–µ–Ω—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞")
                return False
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞")
            return False
        
        # –¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        plan_success = apply_tariff_plan(test_api_key, "premium")
        if plan_success:
            premium_tariff = get_tariff(test_api_key)
            print(f"   ‚úÖ –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω: {premium_tariff['name']} ({premium_tariff['max_tokens']} —Ç–æ–∫–µ–Ω–æ–≤)")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        return False


def test_limit_checking():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
    print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤...")
    
    test_api_key = "sk-test-limits"
    
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∑–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        set_tariff(test_api_key, max_tokens=100, name="Test Limit", description="–¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤")
        
        # –°–±—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        token_tracker.reset_usage(test_api_key)
        
        # –¢–µ—Å—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
        within_limit = token_tracker.check_limit(test_api_key, 100)
        if within_limit:
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω")
            return False
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ –ª–∏–º–∏—Ç–∞
        token_tracker.increment_usage(test_api_key, 90)
        
        # –¢–µ—Å—Ç –Ω–∞ –≥—Ä–∞–Ω–∏ –ª–∏–º–∏—Ç–∞
        at_limit = token_tracker.check_limit(test_api_key, 100)
        if at_limit:
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –≥—Ä–∞–Ω–∏")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ –≥—Ä–∞–Ω–∏")
            return False
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
        token_tracker.increment_usage(test_api_key, 20)
        
        # –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        over_limit = token_tracker.check_limit(test_api_key, 100)
        if not over_limit:
            print("   ‚úÖ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
        return False


def test_health_checks():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è TokenTracker
        tracker_health = token_tracker.health_check()
        print(f"   üìä TokenTracker: {tracker_health['status']}")
        print(f"   üîó Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: {tracker_health['redis_connected']}")
        print(f"   üíæ –ö–ª—é—á–µ–π –≤ fallback: {tracker_health['fallback_keys']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis
        redis_health = get_redis_health()
        print(f"   üîó Redis —Å—Ç–∞—Ç—É—Å: {redis_health['status']}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return False


def test_statistics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TokenTracker
        stats = token_tracker.get_all_usage_stats()
        print(f"   üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats['total_keys']}")
        print(f"   üéØ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']}")
        print(f"   üíæ –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {stats['storage_type']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
        from billing.tariffs import get_tariff_stats
        tariff_stats = get_tariff_stats()
        print(f"   üí∞ –í—Å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤: {tariff_stats['total_tariffs']}")
        print(f"   üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤: {list(tariff_stats['tariff_distribution'].keys())}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π LLM Gateway\n")
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis", test_redis_connection),
        ("Rate Limiting", test_rate_limiting),
        ("Token Tracker", test_token_tracker),
        ("–°–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–∏—Ñ–æ–≤", test_tariff_system),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤", test_limit_checking),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", test_health_checks),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", test_statistics),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"üîç {test_name}...")
        if test_func():
            passed += 1
        print()
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)