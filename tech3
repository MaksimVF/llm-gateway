 –°–æ–∑–¥–∞–π –º–æ–¥—É–ª—å limiter.py –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ llm-gateway. –ú–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω:

–ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ Redis —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ .env.

–†–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–¥–∏–Ω API-–∫–ª—é—á.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–∏ Redis –≤–∏–¥–∞ rate_limit:{api_key} –∏ TTL.

–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å HTTP 429.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å rate_limited (FastAPI Depends) –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö.





---

üîß –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

# gateway/limiter.py

import os
from fastapi import Request, HTTPException
from redis import Redis
from dotenv import load_dotenv

load_dotenv()

redis = Redis(
    host=os.getenv("REDIS_HOST", "localhost"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    db=int(os.getenv("REDIS_DB", 0)),
    decode_responses=True
)

RATE_LIMIT = 30
WINDOW = 60  # seconds

def check_rate_limit(api_key: str):
    key = f"rate_limit:{api_key}"
    current = redis.incr(key)

    if current == 1:
        redis.expire(key, WINDOW)

    if current > RATE_LIMIT:
        raise HTTPException(status_code=429, detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")

async def rate_limited(request: Request):
    api_key = request.headers.get("X-API-Key")
    if not api_key:
        raise HTTPException(status_code=401, detail="API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")

    check_rate_limit(api_key)

—Ç–∞–∫ –∂–µ –°–æ–∑–¥–∞–π —Ñ–∞–π–ª `billing/token_tracker.py` –¥–ª—è FastAPI-based LLM gateway. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª–∞—Å—Å `TokenTracker`, –∫–æ—Ç–æ—Ä—ã–π:

1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Redis –∏ fallback –Ω–∞ —Å–ª–æ–≤–∞—Ä—å.
2. –•—Ä–∞–Ω–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ API-–∫–ª—é—á—É (`str`): `{"used_tokens": int, "last_updated": datetime}`.
3. –ò–º–µ–µ—Ç –º–µ—Ç–æ–¥—ã:
   - `get_usage(api_key: str) -> int`
   - `increment_usage(api_key: str, tokens: int)`
   - `check_limit(api_key: str, max_tokens: int) -> bool`
   - `reset_monthly_usage()` ‚Äî —Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å (cron –ø–æ–¥–¥–µ—Ä–∂–∫–∞)

–î–æ–±–∞–≤—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Redis —á–µ—Ä–µ–∑ `redis-py`, fallback ‚Äî –æ–±—ã—á–Ω—ã–π dict –≤ –ø–∞–º—è—Ç–∏.

–¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª `billing/tariffs.py`, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–ª–æ–≤–∞—Ä—å `TARIFFS = {api_key: {"max_tokens": int}}`.

–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ –∫–ª—é—á—É.

–µ—â—ë –¥–æ–±–∞–≤—å TokenTraker –≤ routes.py
–ø–æ–∑–≤–æ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É usage-–¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–π endpoint /usage